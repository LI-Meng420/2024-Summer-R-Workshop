diamonds %>%
s_plot(cut, carat)
# a continuous variable + a categorical variable
# not recommended; not informative
diamonds %>%
slice_sample(n = 1000) %>%
set_seed(20240624) %>%
s_plot(carat, cut)
#################### ggplot() + aes() ####################
# ggplot() is the basic function to create a blank canvas
ggplot()
# Usually, we need to specify the data,
# ... but it does not change the blank canvas
ggplot(diamonds)
# aes() is used to specify the aesthetics (variables)
# Use `+` to add layers in ggplot, just like `%>%` piping in dplyr
ggplot(diamonds) +
aes(carat)
# aes() is used to specify the aesthetics (variables)
# Use `+` to add layers in ggplot, just like `%>%` piping in dplyr
diamonds %>% summ(carat)
ggplot(diamonds) +
aes(carat, price)
ggplot(diamonds) +
aes(cut)
ggplot(diamonds) +
aes(cut, carat)
#################### geom_...() ####################
# geom_...() is used to add geometric objects (plots)
ggplot(diamonds) +
aes(carat) +
geom_histogram()
ggplot(diamonds) +
aes(carat)
#################### geom_...() ####################
# geom_...() is used to add geometric objects (plots)
ggplot(diamonds) +
aes(carat) +
geom_histogram()
diamonds %>%
slice_sample(n = 1000) %>%
set_seed(20240624) %>%
ggplot() +
aes(carat, price) +
geom_point()
# There should be only one ggplot() in a plot,
# but there can be multiple geom_...() in a plot
diamonds %>%
ggplot() +
aes(cut, price) +
geom_violin() +
geom_boxplot()
diamonds %>%
ggplot() +
aes(cut, price) +
geom_violin()
# There should be only one ggplot() in a plot,
# but there can be multiple geom_...() in a plot
diamonds %>%
ggplot() +
aes(cut, price) +
# geom_violin() +
geom_boxplot()
# There should be only one ggplot() in a plot,
# but there can be multiple geom_...() in a plot
diamonds %>%
ggplot() +
aes(cut, price) +
geom_violin() +
geom_boxplot()
# In fact, aes() can be also put in ggplot() or geom_...()
diamonds %>%
ggplot(aes(cut, price)) +
geom_violin() +
geom_boxplot()
diamonds %>%
ggplot() +
geom_violin(aes(cut, price)) +
geom_boxplot(aes(cut, price))
# ... and it is possible to add different aes() in different geom_...()
diamonds %>%
mutate(price2 = price * 2) %>%
ggplot() +
geom_violin(aes(cut, price)) +
geom_boxplot(aes(cut, price2, fill = cut))
# Nonetheless, beginners may start with the most straightforward way:
diamonds %>%
ggplot() +
aes(cut, price) +
geom_violin() +
geom_boxplot()
# Of course, we could add some arguments to geom_...()
diamonds %>%
ggplot() +
aes(cut, price) +
geom_violin(fill = "lightyellow") +
geom_boxplot(width = .1, outliers = FALSE)
# If you want to give different fill colors to different groups,
# add it in aes()
diamonds %>%
ggplot() +
aes(cut, price, fill = cut) +
geom_violin() +
geom_boxplot(width = .1, outliers = FALSE)
# Sometimes, we only wanna add aes(fill = ...) in one geom_...()
diamonds %>%
ggplot() +
aes(cut, price) +
geom_violin(aes(fill = cut)) + # put aes(fill = ...) here
geom_boxplot(width = .1, outliers = FALSE)
# Some components may not come from the data.
# Use annotate() to add text, points, or lines to the plot.
diamonds %>%
ggplot() +
aes(cut, price) +
geom_violin(aes(fill = cut)) +
geom_boxplot(width = .1, outliers = FALSE) +
annotate(
# Think about the most similar geom_...() to the component you want to add.
# write the "..." here:
"label", # -> geom_label()
x = "Ideal",
y = 1e4,
fill = "gray80",
label = "Ideal"
)
# Use theme() to control the appearance of the plot.
# I prefer to use theme_bw(), theme_classic(), or theme_minimal().
# By default, ggplot2 uses theme_grey(), which is ugly.
diamonds %>%
ggplot() +
aes(cut, price) +
geom_violin(aes(fill = cut)) +
geom_boxplot(width = .1, outliers = FALSE) +
theme_grey()
# Use theme() to control the appearance of the plot.
# I prefer to use theme_bw(), theme_classic(), or theme_minimal().
# By default, ggplot2 uses theme_grey(), which is ugly.
diamonds %>%
ggplot() +
aes(cut, price) +
geom_violin(aes(fill = cut)) +
geom_boxplot(width = .1, outliers = FALSE) +
theme_bw()
# Use theme() to control the appearance of the plot.
# I prefer to use theme_bw(), theme_classic(), or theme_minimal().
# By default, ggplot2 uses theme_grey(), which is ugly.
diamonds %>%
ggplot() +
aes(cut, price) +
geom_violin(aes(fill = cut)) +
geom_boxplot(width = .1, outliers = FALSE) +
statart:::theme_statart()
# Use theme() to control the appearance of the plot.
# I prefer to use theme_bw(), theme_classic(), or theme_minimal().
# By default, ggplot2 uses theme_grey(), which is ugly.
diamonds %>%
ggplot() +
aes(cut, price) +
geom_violin(aes(fill = cut)) +
geom_boxplot(width = .1, outliers = FALSE) +
theme_bw()
# Use labs() to add titles and labels to the plot.
diamonds %>%
ggplot() +
aes(cut, price) +
geom_violin(aes(fill = cut)) +
geom_boxplot(width = .1, outliers = FALSE) +
theme_bw() +
labs(
# I seldom add a title to the plot, because it is usually redundant.
# Yet, you can add a title if you want.
# title = "Price by Cut",
x = "Cut",
y = "Price",
fill = "",
# Normally we do not need this. Just for fun.
caption = str_glue("Created on {Sys.time()}") %>%
str_remove("\\.\\d+$")
)
# Use labs() to add titles and labels to the plot.
diamonds %>%
ggplot() +
aes(cut, price) +
geom_violin(aes(fill = cut)) +
geom_boxplot(width = .1, outliers = FALSE) +
theme_bw() +
labs(
# I seldom add a title to the plot, because it is usually redundant.
# Yet, you can add a title if you want.
title = "Price by Cut",
x = "Cut",
y = "Price",
fill = "",
# Normally we do not need this. Just for fun.
caption = str_glue("Created on {Sys.time()}") %>%
str_remove("\\.\\d+$")
)
# Use coord_...() to control the coordinate system (坐标系).
# coord_cartesian() does not change the plot, but it is useful to zoom in.
diamonds %>%
ggplot() +
aes(cut, price) +
geom_violin(aes(fill = cut)) +
geom_boxplot(width = .1, outliers = FALSE) +
coord_cartesian(ylim = c(0, 1e4)) + # 1e4 = 10,000
theme_bw() +
labs(
x = "Cut",
y = "Price",
fill = "",
caption = str_glue("Created on {Sys.time()}") %>%
str_remove("\\.\\d+$")
)
# coord_flip() is used to flip the x and y axes.
diamonds %>%
ggplot() +
aes(cut, price) +
geom_violin(aes(fill = cut)) +
geom_boxplot(width = .1, outliers = FALSE) +
coord_flip(ylim = c(0, 1e4)) +
theme_bw() +
labs(
x = "Price",
y = "Cut",
fill = "",
caption = str_glue("Created on {Sys.time()}") %>%
str_remove("\\.\\d+$")
)
# Use facet_...() to create facets (分面).
diamonds %>%
mutate(
carat3g = cut_quantile(carat, 3)
) %>%
ggplot() +
aes(cut, price) +
geom_violin(aes(fill = cut)) +
geom_boxplot(width = .1, outliers = FALSE) +
facet_wrap(~ carat3g) +
theme_bw() +
labs(
x = "Cut",
y = "Price",
fill = "",
caption = str_glue("Created on {Sys.time()}") %>%
str_remove("\\.\\d+$")
)
# Use scale_...() to control the scales.
# alter the labels of the x-axis
diamonds %>%
mutate(
carat3g = cut_quantile(carat, 3)
) %>%
ggplot() +
aes(cut, price) +
geom_violin(aes(fill = cut)) +
geom_boxplot(width = .1, outliers = FALSE) +
scale_x_discrete(
labels = c("Fair", "Good", "Very\nGood", "Premium", "Ideal")
) +
facet_wrap(~ carat3g) +
theme_bw() +
labs(
x = "Cut",
y = "Price",
fill = "",
caption = str_glue("Created on {Sys.time()}") %>%
str_remove("\\.\\d+$")
)
# alter the breaks and labels of the y-axis
diamonds %>%
mutate(
carat3g = cut_quantile(carat, 3)
) %>%
ggplot() +
aes(cut, price) +
geom_violin(aes(fill = cut)) +
geom_boxplot(width = .1, outliers = FALSE) +
scale_x_discrete(
labels = c("Fair", "Good", "Very\nGood", "Premium", "Ideal")
) +
scale_y_continuous(
# seq(start, end, step)
breaks = seq(0, 18e3, 3e3), # 18e3 = 18,000
labels = scales::dollar_format()
) +
facet_wrap(~ carat3g) +
theme_bw() +
labs(
x = "Cut",
y = "Price",
fill = "",
caption = str_glue("Created on {Sys.time()}") %>%
str_remove("\\.\\d+$")
)
# alter the fill colors
diamonds %>%
mutate(
carat3g = cut_quantile(carat, 3)
) %>%
ggplot() +
aes(cut, price) +
geom_violin(aes(fill = cut)) +
geom_boxplot(width = .1, outliers = FALSE) +
scale_x_discrete(
labels = c("Fair", "Good", "Very\nGood", "Premium", "Ideal")
) +
scale_y_continuous(
# seq(start, end, step)
breaks = seq(0, 18e3, 3e3), # 18e3 = 18,000
labels = scales::dollar_format()
) +
scale_fill_brewer(
palette = "YlOrRd",
# Remove the legend by setting guide = "none"
# This is AWFULLY difficult to remember!!!
# However, I still recommend you to use it instead of other alternatives.
guide = "none"
) +
facet_wrap(~ carat3g) +
theme_bw() +
labs(
x = "Cut",
y = "Price",
fill = "",
caption = str_glue("Created on {Sys.time()}") %>%
str_remove("\\.\\d+$")
)
# However, only the first three parts are compulsory:
# ggplot(data) +
#   aes(...) +
#   geom_part
#
# Remember this plot?
diamonds %>%
ggplot() +
aes(cut, price) +
geom_violin() +
geom_boxplot()
diamonds %>%
summ(price, .by = cut)
# max price by cut
diamonds %>%
summ(price, .by = cut) %>%
ggplot() +
aes(cut, max) +
geom_col(
fill = "gray", # fill color
color = "black", # border color
) +
theme_bw()
# mean price by cut and color
diamonds %>%
summ(price, .by = cut:color) %>%
ggplot() +
aes(cut, color, fill = mean) +
geom_raster() +
scale_fill_viridis_c() +
theme_bw()
diamonds %>%
summ(price, .by = cut:color)
# frequency of cut-color combinations
diamonds %>%
mutate(
carat100g = cut_length(carat, 100),
price100g = cut_length(price, 100)
) %>%
s_plot(carat100g, price100g) +
theme(
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
# the relationship between carat, depth, and price (continuous)
diamonds %>%
mutate(
carat100g = cut_length(carat, 100),
depth100g = cut_length(depth, 100)
) %>%
summ(price, .by = carat100g:depth100g) %>%
ggplot() +
aes(carat100g, depth100g, fill = mean) +
geom_raster() +
scale_fill_viridis_c() +
theme_bw() +
theme(
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
# the relationship between carat, depth, and price (discrete)
diamonds %>%
mutate(
carat100g = cut_length(carat, 100),
depth100g = cut_length(depth, 100)
) %>%
summ(price, .by = carat100g:depth100g) %>%
mutate(price5g = cut_quantile(mean, 5)) %>%
ggplot() +
aes(carat100g, depth100g, fill = price5g) +
geom_raster() +
scale_fill_viridis_d() +
theme_bw() +
theme(
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
# Load the required packages and the data
pacman::p_load(
tidyverse, statart, showtext
)
# If you want to insert Chinese characters, load 'showtext';
# otherwise, do not load it.
showtext_auto()
showtext_opts(dpi = 300)
run <- read_data(
"D:/R/Teaching/2024 Summer R Workshop/Week 4/Week 4 Assignment/汉马逐公里数据.xlsx",
) %>%
# clean some variables
mutate(
distance = parse_number(distance),
segment = distance - lag(distance, default = 0),
pace = str_remove(pace, "min/km") %>% ms(),
elevation_up = str_extract(elevation, "(?<=\\+)\\d+") %>%
parse_number(),
elevation_down = str_extract(elevation, "(?<=\\-)\\d+") %>%
parse_number(),
elevation = NULL,
power = parse_number(power),
elevation = elevation_up - elevation_down,
speed = 1000 / as_numeric(pace)
)
gg <- run %>%
mutate(
elevation = elevation_up - elevation_down
) %>%
ggplot() +
aes(distance, speed) +
geom_line(lwd = .5) +
geom_point(aes(fill = elevation, size = segment), shape = 21) +
geom_hline(
yintercept = 3.98, color = "firebrick",
lwd = 1, linetype = "dashed") +
scale_x_continuous(
labels = scales::label_number(suffix = " 公里")
) +
scale_fill_viridis_c(
"海拔变化",
direction = -1
) +
scale_size_continuous(
range = c(1, 4),
guide = "none"
) +
labs(
x = "距离",
y = "每公里配速"
) +
theme_bw() +
theme(axis.text.y = element_text(
colour = c(rep("black", 6), "firebrick")
))
gg
avg_pace <- run %>% summ(as.numeric(pace)) %>% pull(mean)
pace_breaks <- seq(240, 270, 5) %>% c(avg_pace)
number_to_pace <- function(number) {
min <- number %/% 60
sec <- number %% 60
sec_pad <- sec %>%
round() %>%
str_pad(2, pad = "0")
str_glue("{min}'{sec_pad}''") %>%
return()
}
gg <- run %>%
filter(distance <= 21) %>%
ggplot() +
aes(distance, pace) +
geom_line(lwd = .5) +
geom_point(aes(fill = as.numeric(pace)), shape = 21, size = 3) +
geom_hline(yintercept = avg_pace, color = "firebrick", lwd = 1, linetype = "dashed") +
annotate(
"label",
x = 3, y = 268.3, label = "更慢", fill = "#FFFFB2"
) +
annotate(
"label",
x = 20, y = 245, label = "更快", fill = "#B10026", color = "white"
) +
scale_y_continuous(
breaks = pace_breaks,
labels = number_to_pace(pace_breaks)
) +
scale_x_continuous(
labels = scales::label_number(suffix = " 公里")
) +
scale_fill_distiller(
palette = "YlOrRd",
guide = "none"
) +
labs(
x = "距离",
y = "每公里配速"
) +
theme_bw() +
theme(axis.text.y = element_text(
colour = c(rep("black", 6), "firebrick")
))
gg
# If you want to keep all plots, you can change the path.
ggsave(path, gg, width = 4.5, height = 3.2)
