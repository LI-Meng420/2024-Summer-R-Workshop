summ() %>%
arrange(name) %>%
print(n = Inf)
identical(
diamonds,
diamonds %>%
group_by(cut)
)
identical(
diamonds,
diamonds %>%
group_by(cut)
)
identical(
diamonds,
diamonds %>%
group_by(cut) %>%
ungroup()
)
diamonds %>%
tab(color, .by = cut)
# We can include two variables in tab()
diamonds %>%
tab(cut, color)
diamonds %>%
tab(cut, .by = color)
# We can even include many variables before or after .by
diamonds %>%
tab(color, clarity, .by = cut)
# Even more, we can tab() an expression!
diamonds %>%
summ(price)
# Even more, we can tab() an expression!
diamonds %>%
tab(high_price = price >= 4e4, .by = c(cut, color))
# Even more, we can tab() an expression!
diamonds %>%
count(high_price = price >= 4e4, .by = c(cut, color))
# Even more, we can tab() an expression!
diamonds %>%
count(high_price = price >= 4e4, .by = c(cut, color)) %>%
print(n = Inf)
# Even more, we can tab() an expression!
diamonds %>%
tab(high_price = price >= 4e4, .by = c(cut, color)) %>%
print(n = Inf)
# Even more, we can tab() an expression!
diamonds %>%
tab(high_price = price >= 4e3, .by = c(cut, color)) %>%
print(n = Inf)
# What is the difference?
diamonds %>%
summ(high_price = price >= 4e3, .by = c(cut, color)) %>%
print(n = Inf)
# ===========================================================
################# summary + visualization ###################
# ===========================================================
diamonds %>%
summ(cut, price)
# ===========================================================
################# summary + visualization ###################
# ===========================================================
diamonds %>%
summ(price, .by = cut)
# ===========================================================
################# summary + visualization ###################
# ===========================================================
diamonds %>%
summ(price, .by = cut) %>%
ggplot() +
aes(cut, mean) +
geom_col()
# ===========================================================
################# summary + visualization ###################
# ===========================================================
diamonds %>%
summ(price, .by = cut) %>%
ggplot() +
aes(cut, mean) +
geom_col() +
theme_bw()
# ===========================================================
################# summary + visualization ###################
# ===========================================================
diamonds %>%
summ(price, .by = cut) %>%
s_plot(cut, mean)
# ===========================================================
################# summary + visualization ###################
# ===========================================================
diamonds %>%
summ(price, .by = cut) %>%
ggplot() +
aes(cut, mean) +
geom_col(
fill = "gray", # fill color
color = "black", # border color
) +
theme_bw()
diamonds %>%
summ(price, .by = cut:color) %>%
ggplot() +
aes(cut, color, fill = mean) +
geom_raster() +
theme_bw()
diamonds %>%
summ(price, .by = cut:color) %>%
ggplot() +
aes(cut, color, fill = mean) +
geom_raster() +
scale_fill_viridis_c() +
theme_bw()
diamonds %>%
summ(price, .by = c(cut, clarity)) %>%
ggplot() +
aes(cut, clarity, fill = mean) +
geom_raster() +
scale_fill_viridis_c() +
theme_bw()
diamonds %>%
summ(price, .by = cut:color) %>%
ggplot() +
aes(cut, color, fill = mean) +
geom_raster() +
scale_fill_viridis_c() +
theme_bw()
diamonds %>%
mutate(
carat100g = cut_length(carat, 100),
price100g = cut_length(price, 100)
) %>%
s_plot(carat100g, price100g)
diamonds %>%
mutate(
carat100g = cut_length(carat, 100),
price100g = cut_length(price, 100)
) %>%
s_plot(carat100g, price100g) +
theme_minimal()
diamonds %>%
mutate(
carat100g = cut_length(carat, 100),
price100g = cut_length(price, 100)
) %>%
s_plot(carat100g, price100g) +
theme(
axis.text = element_blank()
)
diamonds %>%
mutate(
carat100g = cut_length(carat, 100),
price100g = cut_length(price, 100)
) %>%
s_plot(carat100g, price100g) +
theme(
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
diamonds %>%
mutate(
carat100g = cut_length(carat, 100),
price100g = cut_length(price, 100)
) %>%
summ(price, .by = carat100g:price100g) %>%
ggplot() +
aes(carat100g, price100g, fill = mean) +
geom_raster() +
scale_fill_viridis_c() +
theme_bw()
diamonds %>%
mutate(
carat100g = cut_length(carat, 100),
price100g = cut_length(price, 100)
) %>%
summ(price, .by = carat100g:price100g) %>%
ggplot() +
aes(carat100g, price100g, fill = mean) +
geom_raster() +
scale_fill_viridis_c() +
theme_bw() +
theme(
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
# ===========================================================
################# dplyr/statart + ggplot2 ###################
# ===========================================================
diamonds %>%
summ(price, .by = cut) %>%
ggplot() +
aes(cut, mean) +
geom_col(
fill = "gray", # fill color
color = "black", # border color
) +
theme_bw()
# ===========================================================
################# dplyr/statart + ggplot2 ###################
# ===========================================================
#
diamonds %>%
summ(price, .by = cut) %>%
ggplot() +
aes(cut, max) +
geom_col(
fill = "gray", # fill color
color = "black", # border color
) +
theme_bw()
diamonds
# the relationship between carat and price
diamonds %>%
mutate(
carat100g = cut_length(carat, 100),
depth100g = cut_length(depth, 100)
) %>%
summ(price, .by = carat100g:depth100g) %>%
ggplot() +
aes(carat100g, depth100g, fill = price) +
geom_raster() +
scale_fill_viridis_c() +
theme_bw() +
theme(
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
# the relationship between carat and price
diamonds %>%
mutate(
carat100g = cut_length(carat, 100),
depth100g = cut_length(depth, 100)
) %>%
summ(price, .by = carat100g:depth100g) %>%
ggplot() +
aes(carat100g, depth100g, fill = mean) +
geom_raster() +
scale_fill_viridis_c() +
theme_bw() +
theme(
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
?diamonds
# the relationship between carat and price
diamonds %>%
mutate(
carat100g = cut_length(carat, 100),
table100g = cut_length(table, 100)
) %>%
summ(price, .by = carat100g:table100g) %>%
ggplot() +
aes(carat100g, depth100g, fill = mean) +
geom_raster() +
scale_fill_viridis_c() +
theme_bw() +
theme(
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
# the relationship between carat and price
diamonds %>%
mutate(
carat100g = cut_length(carat, 100),
table100g = cut_length(table, 100)
) %>%
summ(price, .by = carat100g:table100g) %>%
ggplot() +
aes(carat100g, table100g, fill = mean) +
geom_raster() +
scale_fill_viridis_c() +
theme_bw() +
theme(
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
# the relationship between carat and price
diamonds %>%
mutate(
carat100g = cut_length(carat, 100),
depth100g = cut_length(depth, 100)
) %>%
summ(price, .by = carat100g:depth100g) %>%
ggplot() +
aes(carat100g, depth100g, fill = mean) +
geom_raster() +
scale_fill_viridis_c() +
theme_bw() +
theme(
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
# the relationship between carat, depth, and price II
diamonds %>%
mutate(
carat100g = cut_length(carat, 100),
depth100g = cut_length(depth, 100),
price5g = cut_quantile(price, 5)
) %>%
summ(price, .by = carat100g:depth100g) %>%
ggplot() +
aes(carat100g, depth100g, fill = price5g) +
geom_raster() +
scale_fill_viridis_d() +
theme_bw() +
theme(
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
# the relationship between carat, depth, and price II
diamonds %>%
mutate(
carat100g = cut_length(carat, 100),
depth100g = cut_length(depth, 100)
) %>%
summ(price, .by = carat100g:depth100g) %>%
mutate(price5g = cut_quantile(mean, 5)) %>%
ggplot() +
aes(carat100g, depth100g, fill = price5g) +
geom_raster() +
scale_fill_viridis_d() +
theme_bw() +
theme(
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
?cut_quantile
# the relationship between carat, depth, and price II
diamonds %>%
mutate(
carat100g = cut_length(carat, 100),
depth100g = cut_length(depth, 100)
) %>%
summ(price, .by = carat100g:depth100g) %>%
mutate(price5g = cut_quantile(mean, 5, labels = FALSE)) %>%
ggplot() +
aes(carat100g, depth100g, fill = price5g) +
geom_raster() +
scale_fill_viridis_d() +
theme_bw() +
theme(
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
# the relationship between carat, depth, and price II
diamonds %>%
mutate(
carat100g = cut_length(carat, 100),
depth100g = cut_length(depth, 100)
) %>%
summ(price, .by = carat100g:depth100g) %>%
mutate(price5g = cut_quantile(mean, 5)) %>%
ggplot() +
aes(carat100g, depth100g, fill = price5g) +
geom_raster() +
scale_fill_viridis_d() +
theme_bw() +
theme(
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
)
# Load the required packages and the data
pacman::p_load(
tidyverse, statart, showtext
)
# If you want to insert Chinese characters, load 'showtext';
# otherwise, do not load it.
showtext_auto()
showtext_opts(dpi = 300)
run <- readxl::read_excel(
"D:/R/Teaching/2024 Summer R Workshop/Week 4/汉马逐公里数据.xlsx",
) %>%
# clean some variables
mutate(
distance = parse_number(distance),
segment = distance - lag(distance, default = 0),
pace = str_remove(pace, "min/km") %>% ms(),
elevation_up = str_extract(elevation, "(?<=\\+)\\d+") %>%
parse_number(),
elevation_down = str_extract(elevation, "(?<=\\-)\\d+") %>%
parse_number(),
elevation = NULL,
power = parse_number(power),
elevation = elevation_up - elevation_down,
speed = 1000 / as_numeric(pace)
)
run <- readxl::read_excel(
"D:/R/Teaching/2024 Summer R Workshop/Week 4/Week 4 Assignment/汉马逐公里数据.xlsx",
) %>%
# clean some variables
mutate(
distance = parse_number(distance),
segment = distance - lag(distance, default = 0),
pace = str_remove(pace, "min/km") %>% ms(),
elevation_up = str_extract(elevation, "(?<=\\+)\\d+") %>%
parse_number(),
elevation_down = str_extract(elevation, "(?<=\\-)\\d+") %>%
parse_number(),
elevation = NULL,
power = parse_number(power),
elevation = elevation_up - elevation_down,
speed = 1000 / as_numeric(pace)
)
run <- read_data(
"D:/R/Teaching/2024 Summer R Workshop/Week 4/Week 4 Assignment/汉马逐公里数据.xlsx",
) %>%
# clean some variables
mutate(
distance = parse_number(distance),
segment = distance - lag(distance, default = 0),
pace = str_remove(pace, "min/km") %>% ms(),
elevation_up = str_extract(elevation, "(?<=\\+)\\d+") %>%
parse_number(),
elevation_down = str_extract(elevation, "(?<=\\-)\\d+") %>%
parse_number(),
elevation = NULL,
power = parse_number(power),
elevation = elevation_up - elevation_down,
speed = 1000 / as_numeric(pace)
)
run %>%
s_plot(distance, heart_rate)
run %>%
s_plot(speed, power)
run %>%
mutate(
stride_length = parse_number(stride_length)
) %>%
s_plot(stride_length, speed) +
labs(y = "速度 (m/s)")
run %>%
s_plot(heart_rate)
run %>%
mutate(
heart_rate = parse_number(heart_rate)
) %>%
s_plot(heart_rate)
run %>%
mutate(
heart_rate = parse_number(heart_rate)
)
run %>%
mutate(
heart_rate = as_numeric(heart_rate)
) %>%
s_plot(heart_rate)
run %>%
mutate(
heart_rate = as_numeric(heart_rate)
) %>%
s_plot(heart_rate)
run %>%
mutate(
heart_rate = as.numeric(heart_rate)
) %>%
s_plot(heart_rate)
run %>%
s_plot(distance)
run %>%
s_plot(speed)
run %>%
summ()
run %>%
s_plot(heart_rate_reserve)
run %>%
s_plot(ground_contact)
gg <- run %>%
mutate(
elevation = elevation_up - elevation_down
) %>%
ggplot() +
aes(distance, speed) +
geom_line(lwd = .5) +
geom_point(aes(fill = elevation, size = segment), shape = 21) +
geom_hline(
yintercept = 3.98, color = "firebrick",
lwd = 1, linetype = "dashed") +
scale_x_continuous(
labels = scales::label_number(suffix = " 公里")
) +
scale_fill_viridis_c(
"海拔变化",
direction = -1
) +
scale_size_continuous(
range = c(1, 4),
guide = "none"
) +
labs(
x = "距离",
y = "每公里配速"
) +
theme_bw() +
theme(axis.text.y = element_text(
colour = c(rep("black", 6), "firebrick")
))
gg
run %>%
s_plot(speed)
run %>%
filter(heart_rate > 150) %>%
s_plot(heart_rate, speed)
