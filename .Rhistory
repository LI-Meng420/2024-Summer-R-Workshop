tb %>%
mutate(
content = content %>% str_replace_all("\\w{2}(?=。)", "____")
) %>%
select(content)
# str_remove() and str_remove_all() remove the matched part
tb %>%
mutate(
content = content %>% str_remove("\\w{2}(?=。)")
) %>%
select(content)
tb %>%
mutate(
content = content %>% str_remove_all("\\w{2}(?=。)")
) %>%
select(content)
# Two ways of joining strings
tb %>%
mutate(
# section + `·` + title
title = paste0(section, "·", title)
)
tb %>%
mutate(
# insert `section` and `title` into the string
title = str_glue("{section}·{title}")
)
# "(\\w)\\1" means a word character followed by the same word character
# E.g., "关关", "萋萋". These are reduplications (叠词).
str_view(fruit, "(\\w)\\1")
tb <- tb %>%
mutate(reduplication = content %>% str_count("(\\w)\\1"))
tb %>%
summ(
reduplication, .by = volumne, .stat = c("mean", "se")
)
tb %>%
filter(
reduplication > 2 & volumne == "颂"
)
tb %>%
filter(
reduplication > 2 & volumne == "风"
)
# Load the data
# Downloaded from https://github.com/Ivysauro/CNRT/blob/master/data/Pay.md
file <- "C:/Users/socim/Downloads/metro-pay-methods.xlsx"
tb <- read_data(file)
tb <- tb %>%
rename_with(
~ c(
"city", "since", "t_union", "union_pay_nfc", "alipay", "wechat_pay",
"union_pay_app", "credit_card", "apps", "other"
)
) %>%
filter(!is.na(city))
tb <- tb %>%
mutate(
across(
c(t_union:apps),
~ str_detect(., "✅") %>%
value_if_na(FALSE)
),
city_code = str_extract(city, "^\\d+"),
city_name = str_extract(city, "\\w+(?=/)"),
city_pinyin = str_extract(city, "(?<=/\\s).+$")
) %>%
relocate(s_match("city_*")) %>%
select(-c(city, credit_card, other))
tb %>%
summ()
tb %>%
s_plot(since)
tb %>%
filter(!t_union)
tb %>%
tab2(alipay, wechat_pay)
tb %>%
filter(alipay & !wechat_pay)
tb %>%
filter(!alipay & wechat_pay)
# This script is used to automatically format the R scripts.
# install.packages("styler")
# Change to your own folder
folder <- "D:/R/Teaching/2024 Summer R Workshop"
# Run this line to format all R scripts in the folder
styler::style_dir(folder)
# Load the required packages and the data
pacman::p_load(
tidyverse, statart, showtext
)
# If you want to insert Chinese characters, load 'showtext';
# otherwise, do not load it.
showtext_auto()
showtext_opts(dpi = 300)
run <- read_data(
"D:/R/Teaching/2024 Summer R Workshop/Week 4/Week 4 Assignment/汉马逐公里数据.xlsx",
) %>%
# clean some variables
mutate(
distance = parse_number(distance),
segment = distance - lag(distance, default = 0),
pace = str_remove(pace, "min/km") %>% ms(),
elevation_up = str_extract(elevation, "(?<=\\+)\\d+") %>%
parse_number(),
elevation_down = str_extract(elevation, "(?<=\\-)\\d+") %>%
parse_number(),
elevation = NULL,
power = parse_number(power),
elevation = elevation_up - elevation_down,
speed = 1000 / as_numeric(pace)
)
run
glimpse(run)
# QUESTION 1. Plot the distribution of ground_contact
run %>% s_plot(ground_contact)
# QUESTION 2. Plot the relationship between speed and power
run %>% s_plot(speed, power)
# QUESTION 3. Plot the relationship between stride_length and speed
run %>% s_plot(stride_length, power) # wrong
run %>%
tab(stride_length)
run %>%
mutate(
stride_length = parse_number(stride_length)
) %>%
tab(stride_length)
run %>%
mutate(
stride_length = parse_number(stride_length)
) %>%
s_plot(stride_length, speed) # correct
# QUESTION 4. Plot the relationship between distance and speed, and
#             the filling color is the value of heart_rate.
#             Make sure the final plot is nice-looking and publishable.
run %>%
ggplot(aes(x = distance, y = speed, fill = heart_rate)) +
geom_line(color = "gray50") +
geom_point(aes(size = heart_rate), shape = 21, alpha = 1) +
scale_fill_viridis_c() +
scale_size_continuous(guide = "none") +
statart:::theme_statart() +
labs(
x = "Distance (km)",
y = "Speed (m/s)",
fill = "Heart Rate"
)
# QUESTION 4. Plot the relationship between distance and speed, and
#             the filling color is the value of heart_rate.
#             Make sure the final plot is nice-looking and publishable.
run %>%
ggplot(aes(x = distance, y = speed, fill = heart_rate)) +
geom_line(color = "gray50") +
geom_point(aes(size = heart_rate), shape = 21, alpha = 1) +
scale_fill_viridis_c() +
scale_size_continuous(guide = "none") +
statart:::theme_statart() +
labs(
x = "距离 (km)",
y = "速度 (m/s)",
fill = "心率"
)
# ===========================================================
##################### prepare the data ######################
# ===========================================================
pacman::p_load(tidyverse, statart, showtext)
showtext_auto()
showtext_opts(dpi = 300)
# Load the data
# Downloaded from https://github.com/chinese-poetry/chinese-poetry/blob/master/%E8%AF%97%E7%BB%8F/shijing.json
file <- "C:/Users/socim/Downloads/shijing.json"
tb <- read_data(file)
tb
glimpse(tb)
# Data cleaning
tb %>% s_type()
# Data cleaning
tb %>% tibble()
# Reshape the data
tb <- tb %>%
unnest_longer(content) %>%
mutate(
paragraph = row_number(),
.by = "title"
)
tb
tb <- tb %>%
mutate(
paragraph_length = str_length(content)
)
tb
# the distribution of paragraph_length
tb %>%
summ(paragraph_length)
tb %>%
s_plot(paragraph_length)
# paragraph_length is 10n (n is an integer)
# + - * / %% %/%
# a / b = c ...... d
201 %% 100
# paragraph_length is 10n (n is an integer)
# + - * / %% %/%
# a / b = c ...... d
201 %/% 100
# paragraph_length is 10n (n is an integer)
# + - * / %% %/%
# a / b = c ...... d
9:11 %% 10 # %% is the modulo operator (remainder of division 余数)
tb %>%
summ(paragraph_length %% 10 == 0)
tb %>%
tab(paragraph_length %% 10 == 0)
tb
tb %>%
select(matches("^c"))
# Position
str_view(fruit, "a")
str_view(fruit, "^a") # ^: start of the string
str_view(fruit, "a$") # $: end of the string
str_view(fruit, "^apple$")
# Selection
str_view(fruit, "[aeiou]$") # [abc]: a, b, or c
str_view(fruit, "r[a-zA-Z]$") # [a-zA-Z]: one of the characters
str_view(fruit, "(a|e|i|o|u)$") # (a|b|c): a, b, or c
str_view(fruit, "(apple|pepper)$") # (apple|pepper): apple or pepper
str_view(fruit, "apple|pepper$") # same as above
str_view(fruit, "a|pepper$") # same as above
str_view(fruit, "a$|pepper$") # same as above
# Quantifiers
str_view(fruit, "p{2}")
str_view(fruit, "p{1,2}")
str_view(fruit, "p{1,3}")
str_view(fruit, "p?e") # ?: 0 or 1
# Metacharacters
# In R, there is no '\', but only '\\'
str_view(sentences, "\\w{10}") # \\w: word character
str_view(sentences, "\\w{10}\\s") # \\s: whitespace
str_view(sentences, "\\s\\w{10}\\s") # find the words with spaces around
telephones <- c(
"123-456-7890",
"123.456.7890",
"123 456 7890",
"1234567890",
"1234567891",
"1234567892"
)
telephones
str_view(telephones, "^\\d{10}") # \\d: digit
str_view(telephones, "^\\d{3}\\s?\\d{3}")
str_view(telephones, "^.{10}") # .: anything
str_view(fruits, "^a.*e$") # .*: 0 or more of anything
str_view(fruit, "^a.*e$") # .*: 0 or more of anything
str_view(fruit, "^a.*y$") # .*: 0 or more of anything
str_view(telephones, "^.*$") # .*: 0 or more of anything
str_view(telephones, "^.+$") # .+: 1 or more of anything
# Look around
str_view(sentences, "\\s\\w{10}\\s") # this includes the whitespaces
str_view(sentences, "(?<=\\s)\\w{10}\\s") # (?<=a): preceded by a
str_view(sentences, "\\s\\w{10}(?=\\s)") # (?=b): followed by b
str_view(sentences, "(?<=\\s)\\w{10}(?=\\s)") # only the words
str_view(sentences, "\\w{10}") # only the words
# Wrapping up:
# How to find the 10-character words?
str_view(
sentences,
"(?<=\\s)\\w{10}(?=[\\s\\.?!])|^\\w{10}(?=\\s)"
)
# Wrapping up:
# How to find the 10-character words?
str_view(
sentences,
"(?<=\\s)\\w{10}(?=[\\s\\.\\?!])|^\\w{10}(?=\\s)"
)
# How to use this regex in R?
sentences %>%
str_extract(
"(?<=\\s)\\w{10}(?=[\\s\\.?!])|^\\w{10}(?=\\s)"
) %>%
# remove NA elements
discard(is.na)
sentences %>%
str_split("\\s")
sentences %>%
str_split("\\s") %>%
flatten()
sentences %>%
str_split("\\s") %>%
flatten() %>%
str_c()
sentences %>%
str_split("\\s") %>%
flatten() %>%
str_c() %>% # all functions starting with str_...() come from stringr
str_extract("\\w{10}")
# Another solution
sentences %>%
str_split("\\s") %>%
flatten() %>%
str_c() %>% # all functions starting with str_...() come from stringr
str_extract("\\w{10}") %>%
discard(is.na)
############# String detection #############
# str_detect() returns a logical vector
tb %>%
filter(content %>% str_detect("女"))
############# String detection #############
# str_detect() returns a logical vector
tb %>%
filter(content %>% str_detect("女"))
tb %>%
tab(content %>% str_detect("女"))
tb %>%
summ(content %>% str_detect("女"))
tb %>%
summ(content %>% str_detect("我"), .by = chapter)
tb %>%
summ(content %>% str_detect("我"), .by = chapter)
tb %>%
summ(content %>% str_detect("君子"), .by = chapter)
tb %>%
summ(content %>% str_detect("王"), .by = chapter)
############# String extraction #############
# str_extract() returns the matched part
tb %>%
mutate(
volumne = str_extract(chapter, "[大小]?\\w$")
) %>%
tab(volumne)
tb <- tb %>%
mutate(
volumne = str_extract(chapter, "[大小]?\\w$") %>%
fct_relevel("风", "小雅", "大雅", "颂")
)
tb
############# String analysis #############
tb %>%
summ(paragraph_length, .by = volumne) %>%
mutate(
sum = n * mean,
percent = sum / sum(sum)
)
############# String visualization #############
tb %>%
summ(paragraph_length, .by = volumne) %>%
mutate(
sum = n * mean,
percent = sum / sum(sum)
) %>%
ggplot() +
geom_col(aes(volumne, sum), fill = "skyblue") +
theme_bw()
# If I need a special tibble for multiple plotting and/or exporting
# I would create a new tibble called "plot_tb".
# As a good practice, "plot_tb" should be a tibble, whereas "tb_plot" may be a ggplot object.
plot_tb <- tb %>%
summ(
wo = content %>% str_detect("我"),
junzi = content %>% str_detect("君子"),
wang = content %>% str_detect("王"),
.by = volumne
) %>%
# to reorder the categories (optional)
mutate(
title = fct_relevel(
name, "wo", "junzi", "wang"
)
)
# If I need a special tibble for multiple plotting and/or exporting
# I would create a new tibble called "plot_tb".
# As a good practice, "plot_tb" should be a tibble, whereas "tb_plot" may be a ggplot object.
plot_tb <- tb %>%
summ(
wo = content %>% str_detect("我"),
junzi = content %>% str_detect("君子"),
wang = content %>% str_detect("王"),
.by = volumne
) %>%
# to reorder the categories (optional)
mutate(
title = fct_relevel(
name, "wo", "junzi", "wang"
)
)
plot_tb
plot_tb %>%
ggplot() +
aes(volumne, title, fill = mean) +
# Better for many ordered categories
# Not appropriate for this case
geom_raster() +
scale_fill_distiller(palette = "Blues", direction = 1) +
theme_bw()
plot_tb %>%
ggplot() +
aes(volumne, mean, fill = title) +
# Suitable for this case
geom_col(position = "dodge") +
scale_fill_brewer(palette = "Blues", direction = 1) +
theme_bw()
############# String manipulation #############
# str_replace() replaces the first matched part
tb %>%
mutate(
content = str_replace(content, "女", "男")
) %>%
select(content)
# str_replace_all() replaces all matched part
tb %>%
mutate(
content = content %>% str_replace_all("。", "！")
) %>%
select(content)
tb %>%
mutate(
content = content %>% str_replace_all("\\w{2}(?=。)", "____")
) %>%
select(content)
############# String removal #############
# str_remove() and str_remove_all() remove the matched part
tb %>%
mutate(
content = content %>% str_remove("\\w{2}(?=。)")
) %>%
select(content)
tb %>%
mutate(
content = content %>% str_remove_all("\\w{2}(?=。)")
) %>%
select(content)
############# String joining #############
# Two ways of joining strings
tb %>%
mutate(
# section + `·` + title
title = paste0(section, "·", title)
)
tb %>%
mutate(
# insert `section` and `title` into the string
title = str_glue("{section}·{title}")
)
str_view(fruit, "(\\w)\\1")
tb <- tb %>%
mutate(reduplication = content %>% str_count("(\\w)\\1"))
tb %>%
summ(
reduplication,
.by = volumne, .stat = c("mean", "se")
)
tb %>%
filter(
reduplication > 2 & volumne == "颂"
)
tb %>%
filter(
reduplication > 2 & volumne == "颂"
) %>%
select(content)
tb %>%
filter(
reduplication > 2 & volumne == "小雅"
) %>%
select(content)
pacman::p_load(tidyverse, statart, showtext)
showtext_auto()
showtext_opts(dpi = 300)
file <- "C:/Users/socim/Downloads/metro-pay-methods.xlsx"
tb <- read_data(file)
tb
tb <- tb %>%
rename_with(
~ c(
"city", "since", "t_union", "union_pay_nfc", "alipay", "wechat_pay",
"union_pay_app", "credit_card", "apps", "other"
)
) %>%
filter(!is.na(city))
tb
# ===========================================================
##################### clean the data ######################
# ===========================================================
tb <- tb %>%
mutate(
across(
c(t_union:apps),
~ str_detect(., "✅") %>%
value_if_na(FALSE)
),
city_code = str_extract(city, "^\\d+"),
city_name = str_extract(city, "\\w+(?=/)"),
city_pinyin = str_extract(city, "(?<=/\\s).+$")
) %>%
relocate(s_match("city_*")) %>%
select(-c(city, credit_card, other))
tb
# ===========================================================
##################### analyze the data ######################
# ===========================================================
tb %>%
summ()
tb %>%
s_plot(since)
tb %>%
filter(!t_union)
tb %>%
tab2(alipay, wechat_pay)
tb %>%
fre2(alipay, wechat_pay)
tb %>%
filter(alipay & !wechat_pay)
tb %>%
filter(!alipay & wechat_pay)
