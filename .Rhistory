facet_wrap(~ carat3g) +
theme_bw() +
labs(
x = "Cut",
y = "Price",
fill = ""
)
Sys.time()
Sys.time() %>%
str_remove("\\s[A-Z]+$")
Sys.time() %>%
str_remove("\\s[A-Z]+$")
Sys.time() %>%
str_remove("\\s[A-Z]+$")
Sys.time() %>%
str_remove("\\s[A-Z]+$")
Sys.time() %>%
str_remove("\\s[A-Z]+$")
Sys.time() %>%
str_remove("\\.\\d+\\s[A-Z]+$")
Sys.time() %>%
str_remove("\\d+\\s[A-Z]+$")
Sys.time() %>%
str_remove("\\s[A-Z]+$") %>%
str_remove("\\.\\d+$")
Sys.time() %>%
str_remove("\\s[A-Z]+$") %>%
str_remove("\\.\\d+$")
Sys.time() %>%
str_remove("\\s[A-Z]+$") %>%
str_remove("\\.\\d+$")
Sys.time() %>%
str_remove("\\s[A-Z]+$") %>%
str_remove("\\.\\d+$") %>%
str_glue("Created on {.}")
# alter the fill colors
diamonds %>%
mutate(
carat3g = cut_quantile(carat, 3)
) %>%
ggplot() +
aes(cut, price) +
geom_violin(aes(fill = cut)) +
geom_boxplot(width = .1, outliers = FALSE) +
scale_x_discrete(
labels = c("Fair", "Good", "Very\nGood", "Premium", "Ideal")
) +
scale_y_continuous(
# seq(start, end, step)
breaks = seq(0, 18e3, 3e3), # 18e3 = 18,000
labels = scales::dollar_format()
) +
scale_fill_brewer(
palette = "YlOrRd",
# Remove the legend by setting guide = "none"
# This is AWFULLY difficult to remember!!!
# However, I still recommend you to use it instead of other alternatives.
guide = "none"
) +
facet_wrap(~ carat3g) +
theme_bw() +
labs(
x = "Cut",
y = "Price",
fill = "",
caption = Sys.time() %>%
str_remove("\\s[A-Z]+$") %>%
str_remove("\\.\\d+$") %>%
str_glue("Created on {.}")
)
# alter the fill colors
diamonds %>%
mutate(
carat3g = cut_quantile(carat, 3)
) %>%
ggplot() +
aes(cut, price) +
geom_violin(aes(fill = cut)) +
geom_boxplot(width = .1, outliers = FALSE) +
scale_x_discrete(
labels = c("Fair", "Good", "Very\nGood", "Premium", "Ideal")
) +
scale_y_continuous(
# seq(start, end, step)
breaks = seq(0, 18e3, 3e3), # 18e3 = 18,000
labels = scales::dollar_format()
) +
scale_fill_brewer(
palette = "YlOrRd",
# Remove the legend by setting guide = "none"
# This is AWFULLY difficult to remember!!!
# However, I still recommend you to use it instead of other alternatives.
guide = "none"
) +
facet_wrap(~ carat3g) +
theme_bw() +
labs(
x = "Cut",
y = "Price",
fill = "",
caption =
str_remove(Sys.time(), "\\s[A-Z]+$") %>%
str_remove("\\.\\d+$") %>%
str_glue("Created on {.}")
)
?Sys.time()
# alter the fill colors
diamonds %>%
mutate(
carat3g = cut_quantile(carat, 3)
) %>%
ggplot() +
aes(cut, price) +
geom_violin(aes(fill = cut)) +
geom_boxplot(width = .1, outliers = FALSE) +
scale_x_discrete(
labels = c("Fair", "Good", "Very\nGood", "Premium", "Ideal")
) +
scale_y_continuous(
# seq(start, end, step)
breaks = seq(0, 18e3, 3e3), # 18e3 = 18,000
labels = scales::dollar_format()
) +
scale_fill_brewer(
palette = "YlOrRd",
# Remove the legend by setting guide = "none"
# This is AWFULLY difficult to remember!!!
# However, I still recommend you to use it instead of other alternatives.
guide = "none"
) +
facet_wrap(~ carat3g) +
theme_bw() +
labs(
x = "Cut",
y = "Price",
fill = "",
caption = str_glue("Created on {Sys.time()}")
)
# alter the fill colors
diamonds %>%
mutate(
carat3g = cut_quantile(carat, 3)
) %>%
ggplot() +
aes(cut, price) +
geom_violin(aes(fill = cut)) +
geom_boxplot(width = .1, outliers = FALSE) +
scale_x_discrete(
labels = c("Fair", "Good", "Very\nGood", "Premium", "Ideal")
) +
scale_y_continuous(
# seq(start, end, step)
breaks = seq(0, 18e3, 3e3), # 18e3 = 18,000
labels = scales::dollar_format()
) +
scale_fill_brewer(
palette = "YlOrRd",
# Remove the legend by setting guide = "none"
# This is AWFULLY difficult to remember!!!
# However, I still recommend you to use it instead of other alternatives.
guide = "none"
) +
facet_wrap(~ carat3g) +
theme_bw() +
labs(
x = "Cut",
y = "Price",
fill = "",
caption = str_glue("Created on {Sys.time()}") %>%
str_remove("\\.\\d+$")
)
# alter the fill colors
diamonds %>%
mutate(
carat3g = cut_quantile(carat, 3)
) %>%
ggplot() +
aes(cut, price) +
geom_violin(aes(fill = cut)) +
geom_boxplot(width = .1, outliers = FALSE) +
scale_x_discrete(
labels = c("Fair", "Good", "Very\nGood", "Premium", "Ideal")
) +
scale_y_continuous(
# seq(start, end, step)
breaks = seq(0, 18e3, 3e3), # 18e3 = 18,000
labels = scales::dollar_format()
) +
scale_fill_brewer(
palette = "YlOrRd",
# Remove the legend by setting guide = "none"
# This is AWFULLY difficult to remember!!!
# However, I still recommend you to use it instead of other alternatives.
guide = "none"
) +
facet_wrap(~ carat3g) +
theme_bw() +
labs(
x = "Cut",
y = "Price",
fill = "",
caption = str_glue("Created on {Sys.time()}") %>%
str_remove("\\.\\d+$")
)
# However, only the first three parts are compulsory:
# ggplot() +
#   aes() +
#   geom_part
diamonds %>%
ggplot() +
aes(cut, price) +
geom_violin() +
geom_boxplot()
# In fact, aes() can be also put in ggplot() or geom_...()
diamonds %>%
ggplot(aes(cut, price)) +
geom_violin() +
geom_boxplot()
diamonds %>%
ggplot() +
geom_violin(aes(cut, price)) +
geom_boxplot(aes(cut, price))
# ... and it is possible to add different aes() in different geom_...()
diamonds %>%
ggplot() +
aes(cut, price) +
geom_violin() +
geom_boxplot(aes(fill = cut))
# ... and it is possible to add different aes() in different geom_...()
diamonds %>%
mutate(price2 = price * 2) %>%
ggplot() +
geom_violin(aes(cut, price)) +
geom_boxplot(aes(cut, price2, fill = cut))
# If you want to give different fill colors to different groups,
# add it in aes()
diamonds %>%
ggplot() +
aes(cut, price, fill = cut) +
geom_violin() +
geom_boxplot(width = .1, outliers = FALSE)
# Sometimes, we only wanna add aes(fill = ...) in one geom_...()
diamonds %>%
ggplot() +
aes(cut, price) +
geom_violin(aes(fill = cut)) +
geom_boxplot(width = .1, outliers = FALSE)
# Some components may not come from the data.
# Use annotate() to add text, points, or lines to the plot.
diamonds %>%
ggplot() +
aes(cut, price) +
geom_violin(aes(fill = cut)) +
geom_boxplot(width = .1, outliers = FALSE) +
annotate(
"text",
x = "Ideal",
y = 1e4, # 1e4 = 10,000
label = "Ideal"
)
# Some components may not come from the data.
# Use annotate() to add text, points, or lines to the plot.
diamonds %>%
ggplot() +
aes(cut, price) +
geom_violin(aes(fill = cut)) +
geom_boxplot(width = .1, outliers = FALSE) +
annotate(
"label",
x = "Ideal",
y = 1e4, # 1e4 = 10,000
label = "Ideal"
)
# Some components may not come from the data.
# Use annotate() to add text, points, or lines to the plot.
diamonds %>%
ggplot() +
aes(cut, price) +
geom_violin(aes(fill = cut)) +
geom_boxplot(width = .1, outliers = FALSE) +
annotate(
# Think about the most similar geom_...() to the component you want to add.
# write the "..." here:
"label", # -> geom_label()
x = "Ideal",
y = 1e4,
label = "Ideal"
)
# Some components may not come from the data.
# Use annotate() to add text, points, or lines to the plot.
diamonds %>%
ggplot() +
aes(cut, price) +
geom_violin(aes(fill = cut)) +
geom_boxplot(width = .1, outliers = FALSE) +
annotate(
# Think about the most similar geom_...() to the component you want to add.
# write the "..." here:
"label", # -> geom_label()
x = "Ideal",
y = 1e4,
fill = "lightgray",
label = "Ideal"
)
# Some components may not come from the data.
# Use annotate() to add text, points, or lines to the plot.
diamonds %>%
ggplot() +
aes(cut, price) +
geom_violin(aes(fill = cut)) +
geom_boxplot(width = .1, outliers = FALSE) +
annotate(
# Think about the most similar geom_...() to the component you want to add.
# write the "..." here:
"label", # -> geom_label()
x = "Ideal",
y = 1e4,
fill = "gray80",
label = "Ideal"
)
gg <- run %>%
filter(distance <= 21) %>%
ggplot() +
aes(distance, pace) +
geom_line(lwd = .5) +
geom_point(aes(fill = as.numeric(pace)), shape = 21, size = 3) +
geom_hline(yintercept = avg_pace, color = "firebrick", lwd = 1, linetype = "dashed") +
annotate(
"label",
x = 3, y = 268.3, label = "更慢", fill = "#FFFFB2"
) +
annotate(
"label",
x = 20, y = 245, label = "更快", fill = "#B10026", color = "white"
) +
scale_y_continuous(
breaks = pace_breaks,
labels = number_to_pace(pace_breaks)
) +
scale_x_continuous(
labels = scales::label_number(suffix = " 公里")
) +
scale_fill_distiller(
palette = "YlOrRd",
guide = "none"
) +
labs(
x = "距离",
y = "每公里配速"
) +
theme_bw(
axis.text.y = element_text(
colour = c(rep("black", 6), "firebrick")
)
)
# If you want to keep all plots, you can change the path.
ggsave(path, gg, width = 4.5, height = 3.2)
gg <- run %>%
filter(distance <= 21) %>%
ggplot() +
aes(distance, pace) +
geom_line(lwd = .5) +
geom_point(aes(fill = as.numeric(pace)), shape = 21, size = 3) +
geom_hline(yintercept = avg_pace, color = "firebrick", lwd = 1, linetype = "dashed") +
annotate(
"label",
x = 3, y = 268.3, label = "更慢", fill = "#FFFFB2"
) +
annotate(
"label",
x = 20, y = 245, label = "更快", fill = "#B10026", color = "white"
) +
scale_y_continuous(
breaks = pace_breaks,
labels = number_to_pace(pace_breaks)
) +
scale_x_continuous(
labels = scales::label_number(suffix = " 公里")
) +
scale_fill_distiller(
palette = "YlOrRd",
guide = "none"
) +
labs(
x = "距离",
y = "每公里配速"
) +
theme_bw(
axis.text.y = element_text(
colour = c(rep("black", 6), "firebrick")
)
)
# Load the required packages and the data
pacman::p_load(
tidyverse, statart, showtext
)
# If you want to insert Chinese characters, load 'showtext';
# otherwise, do not load it.
showtext_auto()
showtext_opts(dpi = 300)
run <- readxl::read_excel(
"D:/R/Teaching/2024 Summer R Workshop/Week 4/汉马逐公里数据.xlsx",
) %>%
# clean some variables
mutate(
distance = parse_number(distance),
segment = distance - lag(distance, default = 0),
pace = str_remove(pace, "min/km") %>% ms(),
elevation_up = str_extract(elevation, "(?<=\\+)\\d+") %>%
parse_number(),
elevation_down = str_extract(elevation, "(?<=\\-)\\d+") %>%
parse_number(),
elevation = NULL,
power = parse_number(power),
elevation = elevation_up - elevation_down,
speed = 1000 / as_numeric(pace)
)
gg <- run %>%
mutate(
elevation = elevation_up - elevation_down
) %>%
ggplot() +
aes(distance, speed) +
geom_line(lwd = .5) +
geom_point(aes(fill = elevation, size = segment), shape = 21) +
geom_hline(
yintercept = 3.98, color = "firebrick",
lwd = 1, linetype = "dashed") +
scale_x_continuous(
labels = scales::label_number(suffix = " 公里")
) +
scale_fill_viridis_c(
"海拔变化",
direction = -1
) +
scale_size_continuous(
range = c(1, 4),
guide = "none"
) +
labs(
x = "距离",
y = "每公里配速"
) +
theme_bw(
axis.text.y = element_text(
colour = c(rep("black", 6), "firebrick")
)
)
path <- "D:/R/Teaching/2024 Summer R Workshop/Week 4/plot.png"
gg <- run %>%
mutate(
elevation = elevation_up - elevation_down
) %>%
ggplot() +
aes(distance, speed) +
geom_line(lwd = .5) +
geom_point(aes(fill = elevation, size = segment), shape = 21) +
geom_hline(
yintercept = 3.98, color = "firebrick",
lwd = 1, linetype = "dashed") +
scale_x_continuous(
labels = scales::label_number(suffix = " 公里")
) +
scale_fill_viridis_c(
"海拔变化",
direction = -1
) +
scale_size_continuous(
range = c(1, 4),
guide = "none"
) +
labs(
x = "距离",
y = "每公里配速"
) +
theme_bw(
axis.text.y = element_text(
colour = c(rep("black", 6), "firebrick")
)
)
gg <- run %>%
mutate(
elevation = elevation_up - elevation_down
) %>%
ggplot() +
aes(distance, speed) +
geom_line(lwd = .5) +
geom_point(aes(fill = elevation, size = segment), shape = 21) +
geom_hline(
yintercept = 3.98, color = "firebrick",
lwd = 1, linetype = "dashed") +
scale_x_continuous(
labels = scales::label_number(suffix = " 公里")
) +
scale_fill_viridis_c(
"海拔变化",
direction = -1
) +
scale_size_continuous(
range = c(1, 4),
guide = "none"
) +
labs(
x = "距离",
y = "每公里配速"
) +
theme_bw() +
theme(axis.text.y = element_text(
colour = c(rep("black", 6), "firebrick")
))
path <- "D:/R/Teaching/2024 Summer R Workshop/Week 4/plot.png"
gg
